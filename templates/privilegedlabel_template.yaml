# Demo use only
---
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: privilegedlabels
spec:
  crd:
    spec:
      names:
        kind: PrivilegedLabels
        listKind: PrivilegedLabelsList
        plural: privilegedlabels
        singular: privilegedlabels
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            label:
              type: string
            users:
              type: array
              items: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
         package privilegedlabels

         user_authorized(user, userlist) {
            some i
            userlist[i] == user
         }

         violation[{"msg": msg, "details": {}}] {
            old_labels := {label | input.review.oldObject.metadata.labels[label]}
            new_labels := {label | input.review.object.metadata.labels[label]} 
            # We are checking for the label key (not value) here. If an user tried to update the value of a label, that will not be caught.
            label_diff := new_labels - old_labels
            contains(concat(" ", label_diff), input.parameters.label)

            userlist := input.parameters.users
            user := input.review.userInfo.username
            not user_authorized(user, userlist)
            
            msg := sprintf("\n\nDENIED. You're using a privileged label %v! \n\nOnly the following users(%v) can perform the action.\n", [input.parameters.label, userlist])
         }

---
